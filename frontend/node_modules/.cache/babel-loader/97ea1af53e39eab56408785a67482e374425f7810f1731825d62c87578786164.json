{"ast":null,"code":"import _regeneratorRuntime from \"/home/jayjathar/BiIntegration/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/jayjathar/BiIntegration/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { ref, computed } from 'vue';\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport { DataLine, Document, Upload, UploadFilled, Grid, Connection, Port, DataBase, User, Key, Separator, Quote, View, Refresh } from '@element-plus/icons-vue';\nexport default {\n  name: 'App',\n  components: {\n    DataLine: DataLine,\n    Document: Document,\n    Upload: Upload,\n    UploadFilled: UploadFilled,\n    Grid: Grid,\n    Connection: Connection,\n    Port: Port,\n    DataBase: DataBase,\n    User: User,\n    Key: Key,\n    Separator: Separator,\n    Quote: Quote,\n    View: View,\n    Refresh: Refresh\n  },\n  setup: function setup() {\n    var form = ref({\n      sourceType: 'clickhouse',\n      connectionType: 'http',\n      host: '',\n      port: '',\n      database: '',\n      user: '',\n      jwtToken: '',\n      query: '',\n      tableName: '',\n      file: null,\n      fileFormat: 'csv',\n      delimiter: ',',\n      quoteChar: '\"',\n      hasHeader: true,\n      selectedTable: '',\n      selectedColumns: []\n    });\n    var activeStep = ref(0);\n    var loading = ref(false);\n    var testingConnection = ref(false);\n    var showSuccessDialog = ref(false);\n    var showPreviewDialog = ref(false);\n    var previewLoading = ref(false);\n    var previewData = ref([]);\n    var previewHeaders = ref([]);\n    var tables = ref([]);\n    var columns = ref([]);\n    var loadingTables = ref(false);\n    var isConnectionValid = computed(function () {\n      return form.value.host && form.value.port && form.value.database && form.value.user;\n    });\n    var getFileAcceptType = computed(function () {\n      switch (form.value.fileFormat) {\n        case 'csv':\n          return '.csv';\n        case 'tsv':\n          return '.tsv';\n        case 'json':\n          return '.json';\n        default:\n          return '*';\n      }\n    });\n    var getFileTypeDescription = computed(function () {\n      switch (form.value.fileFormat) {\n        case 'csv':\n          return 'CSV files up to 10MB';\n        case 'tsv':\n          return 'TSV files up to 10MB';\n        case 'json':\n          return 'JSON files up to 10MB';\n        default:\n          return 'Files up to 10MB';\n      }\n    });\n    var handleSourceChange = function handleSourceChange() {\n      activeStep.value = 1;\n    };\n    var handleFileChange = function handleFileChange(file) {\n      form.value.file = file.raw;\n      activeStep.value = 1;\n    };\n    var testConnection = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$axios$post, data, _error$response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              testingConnection.value = true;\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.post('/api/data-flow/test-connection', {\n                connectionType: form.value.connectionType,\n                host: form.value.host,\n                port: form.value.port,\n                database: form.value.database,\n                user: form.value.user,\n                jwtToken: form.value.jwtToken\n              });\n            case 4:\n              _yield$axios$post = _context.sent;\n              data = _yield$axios$post.data;\n              ElMessage.success(data.message || 'Connection successful!');\n              _context.next = 12;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](1);\n              ElMessage.error(((_error$response = _context.t0.response) === null || _error$response === void 0 || (_error$response = _error$response.data) === null || _error$response === void 0 ? void 0 : _error$response.message) || 'Connection failed');\n            case 12:\n              _context.prev = 12;\n              testingConnection.value = false;\n              return _context.finish(12);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[1, 9, 12, 15]]);\n      }));\n      return function testConnection() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    var fetchTables = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$axios$post2, data, _error$response2;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              loadingTables.value = true;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return axios.post('/api/data-flow/tables', {\n                connectionType: form.value.connectionType,\n                host: form.value.host,\n                port: form.value.port,\n                database: form.value.database,\n                user: form.value.user,\n                jwtToken: form.value.jwtToken\n              });\n            case 4:\n              _yield$axios$post2 = _context2.sent;\n              data = _yield$axios$post2.data;\n              tables.value = data.tables;\n              _context2.next = 12;\n              break;\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              ElMessage.error(((_error$response2 = _context2.t0.response) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.data) === null || _error$response2 === void 0 ? void 0 : _error$response2.message) || 'Failed to fetch tables');\n            case 12:\n              _context2.prev = 12;\n              loadingTables.value = false;\n              return _context2.finish(12);\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 9, 12, 15]]);\n      }));\n      return function fetchTables() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var handleTableSelect = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tableName) {\n        var _yield$axios$post3, data, _error$response3;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (tableName) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 2:\n              _context3.prev = 2;\n              _context3.next = 5;\n              return axios.post('/api/data-flow/columns', {\n                connectionType: form.value.connectionType,\n                host: form.value.host,\n                port: form.value.port,\n                database: form.value.database,\n                user: form.value.user,\n                jwtToken: form.value.jwtToken,\n                table: tableName\n              });\n            case 5:\n              _yield$axios$post3 = _context3.sent;\n              data = _yield$axios$post3.data;\n              columns.value = data.columns;\n              form.value.selectedColumns = columns.value.map(function (col) {\n                return col.name;\n              });\n              _context3.next = 14;\n              break;\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](2);\n              ElMessage.error(((_error$response3 = _context3.t0.response) === null || _error$response3 === void 0 || (_error$response3 = _error$response3.data) === null || _error$response3 === void 0 ? void 0 : _error$response3.message) || 'Failed to fetch columns');\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[2, 11]]);\n      }));\n      return function handleTableSelect(_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    var selectAllColumns = function selectAllColumns(select) {\n      if (form.value.sourceType === 'clickhouse') {\n        form.value.selectedColumns = select ? columns.value.map(function (col) {\n          return col.name;\n        }) : [];\n      } else {\n        form.value.selectedColumns = select ? previewHeaders.value : [];\n      }\n    };\n    var previewFile = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var formData, _yield$axios$post4, data, _error$response4;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              previewLoading.value = true;\n              _context4.prev = 1;\n              formData = new FormData();\n              formData.append('file', form.value.file);\n              formData.append('format', form.value.fileFormat);\n              formData.append('delimiter', form.value.delimiter);\n              formData.append('quoteChar', form.value.quoteChar);\n              formData.append('hasHeader', form.value.hasHeader);\n              _context4.next = 10;\n              return axios.post('/api/data-flow/preview-file', formData, {\n                headers: {\n                  'Content-Type': 'multipart/form-data'\n                }\n              });\n            case 10:\n              _yield$axios$post4 = _context4.sent;\n              data = _yield$axios$post4.data;\n              previewData.value = data.rows;\n              previewHeaders.value = data.headers;\n              form.value.selectedColumns = data.headers;\n              showPreviewDialog.value = true;\n              _context4.next = 21;\n              break;\n            case 18:\n              _context4.prev = 18;\n              _context4.t0 = _context4[\"catch\"](1);\n              ElMessage.error(((_error$response4 = _context4.t0.response) === null || _error$response4 === void 0 || (_error$response4 = _error$response4.data) === null || _error$response4 === void 0 ? void 0 : _error$response4.message) || 'Failed to preview file');\n            case 21:\n              _context4.prev = 21;\n              previewLoading.value = false;\n              return _context4.finish(21);\n            case 24:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[1, 18, 21, 24]]);\n      }));\n      return function previewFile() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    var handleSubmit = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var response, formData, _response, _error$response5;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              loading.value = true;\n              _context5.prev = 1;\n              if (!(form.value.sourceType === 'clickhouse')) {\n                _context5.next = 9;\n                break;\n              }\n              _context5.next = 5;\n              return axios.post('/api/data-flow/clickhouse-to-file', {\n                connectionType: form.value.connectionType,\n                host: form.value.host,\n                port: form.value.port,\n                database: form.value.database,\n                user: form.value.user,\n                jwtToken: form.value.jwtToken,\n                query: form.value.query\n              });\n            case 5:\n              response = _context5.sent;\n              ElMessage.success(response.data);\n              _context5.next = 20;\n              break;\n            case 9:\n              formData = new FormData();\n              formData.append('file', form.value.file);\n              formData.append('tableName', form.value.tableName);\n              formData.append('format', form.value.fileFormat);\n              formData.append('delimiter', form.value.delimiter);\n              formData.append('quoteChar', form.value.quoteChar);\n              formData.append('hasHeader', form.value.hasHeader);\n              _context5.next = 18;\n              return axios.post('/api/data-flow/file-to-clickhouse', formData, {\n                headers: {\n                  'Content-Type': 'multipart/form-data'\n                }\n              });\n            case 18:\n              _response = _context5.sent;\n              ElMessage.success(_response.data);\n            case 20:\n              activeStep.value = 2;\n              showSuccessDialog.value = true;\n              _context5.next = 27;\n              break;\n            case 24:\n              _context5.prev = 24;\n              _context5.t0 = _context5[\"catch\"](1);\n              ElMessage.error(((_error$response5 = _context5.t0.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || 'An error occurred');\n            case 27:\n              _context5.prev = 27;\n              loading.value = false;\n              return _context5.finish(27);\n            case 30:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, null, [[1, 24, 27, 30]]);\n      }));\n      return function handleSubmit() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    return {\n      form: form,\n      activeStep: activeStep,\n      loading: loading,\n      testingConnection: testingConnection,\n      showSuccessDialog: showSuccessDialog,\n      showPreviewDialog: showPreviewDialog,\n      previewLoading: previewLoading,\n      previewData: previewData,\n      previewHeaders: previewHeaders,\n      isConnectionValid: isConnectionValid,\n      getFileAcceptType: getFileAcceptType,\n      getFileTypeDescription: getFileTypeDescription,\n      handleSourceChange: handleSourceChange,\n      handleFileChange: handleFileChange,\n      testConnection: testConnection,\n      previewFile: previewFile,\n      handleSubmit: handleSubmit,\n      tables: tables,\n      columns: columns,\n      loadingTables: loadingTables,\n      fetchTables: fetchTables,\n      handleTableSelect: handleTableSelect,\n      selectAllColumns: selectAllColumns\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","axios","ElMessage","DataLine","Document","Upload","UploadFilled","Grid","Connection","Port","DataBase","User","Key","Separator","Quote","View","Refresh","name","components","setup","form","sourceType","connectionType","host","port","database","user","jwtToken","query","tableName","file","fileFormat","delimiter","quoteChar","hasHeader","selectedTable","selectedColumns","activeStep","loading","testingConnection","showSuccessDialog","showPreviewDialog","previewLoading","previewData","previewHeaders","tables","columns","loadingTables","isConnectionValid","value","getFileAcceptType","getFileTypeDescription","handleSourceChange","handleFileChange","raw","testConnection","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axios$post","data","_error$response","wrap","_callee$","_context","prev","next","post","sent","success","message","t0","error","response","finish","stop","apply","arguments","fetchTables","_ref2","_callee2","_yield$axios$post2","_error$response2","_callee2$","_context2","handleTableSelect","_ref3","_callee3","_yield$axios$post3","_error$response3","_callee3$","_context3","abrupt","table","map","col","_x","selectAllColumns","select","previewFile","_ref4","_callee4","formData","_yield$axios$post4","_error$response4","_callee4$","_context4","FormData","append","headers","rows","handleSubmit","_ref5","_callee5","_response","_error$response5","_callee5$","_context5"],"sources":["/home/jayjathar/BiIntegration/frontend/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <el-container>\n      <el-header class=\"header\">\n        <div class=\"header-content\">\n          <h1>Data Integration Platform</h1>\n          <p class=\"subtitle\">Seamlessly transfer data between ClickHouse and Flat Files</p>\n        </div>\n      </el-header>\n      \n      <el-main class=\"main-content\">\n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <el-card class=\"data-flow-card\" shadow=\"hover\">\n              <template #header>\n                <div class=\"card-header\">\n                  <span class=\"header-title\">Data Flow Configuration</span>\n                  <el-tag type=\"info\" effect=\"dark\">v1.0</el-tag>\n                </div>\n              </template>\n              \n              <el-steps :active=\"activeStep\" finish-status=\"success\" class=\"steps\">\n                <el-step title=\"Select Source\" description=\"Choose your data source\"></el-step>\n                <el-step title=\"Configure\" description=\"Set up the transfer\"></el-step>\n                <el-step title=\"Execute\" description=\"Run the transfer\"></el-step>\n              </el-steps>\n\n              <el-form :model=\"form\" label-width=\"120px\" class=\"data-form\">\n                <el-form-item label=\"Source Type\" class=\"source-type\">\n                  <el-radio-group v-model=\"form.sourceType\" @change=\"handleSourceChange\">\n                    <el-radio-button label=\"clickhouse\">\n                      <el-icon><DataLine /></el-icon>\n                      ClickHouse\n                    </el-radio-button>\n                    <el-radio-button label=\"file\">\n                      <el-icon><Document /></el-icon>\n                      Flat File\n                    </el-radio-button>\n                  </el-radio-group>\n                </el-form-item>\n\n                <el-divider content-position=\"center\">\n                  <el-tag type=\"primary\">Configuration</el-tag>\n                </el-divider>\n\n                <template v-if=\"form.sourceType === 'clickhouse'\">\n                  <el-form-item label=\"Connection Type\" class=\"connection-type\">\n                    <el-radio-group v-model=\"form.connectionType\">\n                      <el-radio-button label=\"http\">HTTP</el-radio-button>\n                      <el-radio-button label=\"https\">HTTPS</el-radio-button>\n                    </el-radio-group>\n                  </el-form-item>\n\n                  <el-row :gutter=\"20\">\n                    <el-col :span=\"12\">\n                      <el-form-item label=\"Host\" required>\n                        <el-input v-model=\"form.host\" placeholder=\"e.g., localhost\">\n                          <template #prefix>\n                            <el-icon><Connection /></el-icon>\n                          </template>\n                        </el-input>\n                      </el-form-item>\n                    </el-col>\n                    <el-col :span=\"12\">\n                      <el-form-item label=\"Port\" required>\n                        <el-input v-model=\"form.port\" placeholder=\"e.g., 8123\">\n                          <template #prefix>\n                            <el-icon><Port /></el-icon>\n                          </template>\n                        </el-input>\n                      </el-form-item>\n                    </el-col>\n                  </el-row>\n\n                  <el-row :gutter=\"20\">\n                    <el-col :span=\"12\">\n                      <el-form-item label=\"Database\" required>\n                        <el-input v-model=\"form.database\" placeholder=\"e.g., default\">\n                          <template #prefix>\n                            <el-icon><DataBase /></el-icon>\n                          </template>\n                        </el-input>\n                      </el-form-item>\n                    </el-col>\n                    <el-col :span=\"12\">\n                      <el-form-item label=\"User\" required>\n                        <el-input v-model=\"form.user\" placeholder=\"e.g., default\">\n                          <template #prefix>\n                            <el-icon><User /></el-icon>\n                          </template>\n                        </el-input>\n                      </el-form-item>\n                    </el-col>\n                  </el-row>\n\n                  <el-form-item label=\"JWT Token\">\n                    <el-input\n                      v-model=\"form.jwtToken\"\n                      type=\"password\"\n                      placeholder=\"Enter JWT token if required\"\n                      show-password\n                    >\n                      <template #prefix>\n                        <el-icon><Key /></el-icon>\n                      </template>\n                    </el-input>\n                  </el-form-item>\n\n                  <el-divider content-position=\"center\">\n                    <el-tag type=\"primary\">Schema Discovery</el-tag>\n                  </el-divider>\n\n                  <el-form-item label=\"Tables\" class=\"tables-list\">\n                    <el-select\n                      v-model=\"form.selectedTable\"\n                      placeholder=\"Select a table\"\n                      @change=\"handleTableSelect\"\n                      :loading=\"loadingTables\"\n                    >\n                      <el-option\n                        v-for=\"table in tables\"\n                        :key=\"table.name\"\n                        :label=\"table.name\"\n                        :value=\"table.name\"\n                      />\n                    </el-select>\n                    <el-button \n                      type=\"primary\" \n                      @click=\"fetchTables\" \n                      :loading=\"loadingTables\"\n                      class=\"refresh-tables\"\n                    >\n                      <el-icon><Refresh /></el-icon>\n                      Refresh\n                    </el-button>\n                  </el-form-item>\n\n                  <el-form-item label=\"Columns\" v-if=\"columns.length > 0\">\n                    <el-card class=\"columns-card\">\n                      <template #header>\n                        <div class=\"columns-header\">\n                          <span>Available Columns</span>\n                          <el-button-group>\n                            <el-button @click=\"selectAllColumns(true)\" size=\"small\">\n                              Select All\n                            </el-button>\n                            <el-button @click=\"selectAllColumns(false)\" size=\"small\">\n                              Deselect All\n                            </el-button>\n                          </el-button-group>\n                        </div>\n                      </template>\n                      <el-checkbox-group v-model=\"form.selectedColumns\">\n                        <el-row :gutter=\"20\">\n                          <el-col :span=\"8\" v-for=\"column in columns\" :key=\"column.name\">\n                            <el-checkbox :label=\"column.name\">\n                              {{ column.name }}\n                              <el-tag size=\"small\" type=\"info\" class=\"column-type\">\n                                {{ column.type }}\n                              </el-tag>\n                            </el-checkbox>\n                          </el-col>\n                        </el-row>\n                      </el-checkbox-group>\n                    </el-card>\n                  </el-form-item>\n\n                  <el-divider content-position=\"center\">\n                    <el-tag type=\"primary\">Query Configuration</el-tag>\n                  </el-divider>\n\n                  <el-form-item label=\"Query\" class=\"query-input\">\n                    <el-input\n                      type=\"textarea\"\n                      v-model=\"form.query\"\n                      :rows=\"6\"\n                      placeholder=\"Enter your SQL query\"\n                      resize=\"none\"\n                    ></el-input>\n                    <div class=\"query-tips\">\n                      <el-tag size=\"small\" type=\"info\">Tip: Use SELECT * FROM table_name to export all data</el-tag>\n                    </div>\n                  </el-form-item>\n\n                  <el-form-item>\n                    <el-button type=\"primary\" @click=\"testConnection\" :loading=\"testingConnection\">\n                      <el-icon><Connection /></el-icon>\n                      Test Connection\n                    </el-button>\n                  </el-form-item>\n                </template>\n\n                <template v-else>\n                  <el-form-item label=\"File Format\" class=\"file-format\">\n                    <el-radio-group v-model=\"form.fileFormat\">\n                      <el-radio-button label=\"csv\">CSV</el-radio-button>\n                      <el-radio-button label=\"tsv\">TSV</el-radio-button>\n                      <el-radio-button label=\"json\">JSON</el-radio-button>\n                    </el-radio-group>\n                  </el-form-item>\n\n                  <template v-if=\"form.fileFormat !== 'json'\">\n                    <el-row :gutter=\"20\">\n                      <el-col :span=\"12\">\n                        <el-form-item label=\"Delimiter\" required>\n                          <el-input v-model=\"form.delimiter\" placeholder=\"e.g., , or \\t\">\n                            <template #prefix>\n                              <el-icon><Separator /></el-icon>\n                            </template>\n                          </el-input>\n                        </el-form-item>\n                      </el-col>\n                      <el-col :span=\"12\">\n                        <el-form-item label=\"Quote Character\">\n                          <el-input v-model=\"form.quoteChar\" placeholder=\"e.g., &quot;\">\n                            <template #prefix>\n                              <el-icon><Quote /></el-icon>\n                            </template>\n                          </el-input>\n                        </el-form-item>\n                      </el-col>\n                    </el-row>\n\n                    <el-form-item label=\"Has Header\" class=\"header-row\">\n                      <el-switch\n                        v-model=\"form.hasHeader\"\n                        active-text=\"Yes\"\n                        inactive-text=\"No\"\n                      />\n                    </el-form-item>\n                  </template>\n\n                  <el-form-item label=\"File\" class=\"file-upload\">\n                    <el-upload\n                      class=\"upload-demo\"\n                      drag\n                      action=\"#\"\n                      :auto-upload=\"false\"\n                      :on-change=\"handleFileChange\"\n                      :limit=\"1\"\n                      :accept=\"getFileAcceptType\"\n                    >\n                      <el-icon class=\"el-icon--upload\"><upload-filled /></el-icon>\n                      <div class=\"el-upload__text\">\n                        Drop file here or <em>click to upload</em>\n                      </div>\n                      <template #tip>\n                        <div class=\"el-upload__tip\">\n                          {{ getFileTypeDescription }}\n                        </div>\n                      </template>\n                    </el-upload>\n                  </el-form-item>\n\n                  <el-form-item label=\"Table Name\" class=\"table-name\">\n                    <el-input \n                      v-model=\"form.tableName\" \n                      placeholder=\"Enter target table name\"\n                    >\n                      <template #prefix>\n                        <el-icon><Grid /></el-icon>\n                      </template>\n                    </el-input>\n                  </el-form-item>\n\n                  <el-form-item label=\"Preview\" v-if=\"form.file\">\n                    <el-button type=\"primary\" @click=\"previewFile\" :loading=\"previewLoading\">\n                      <el-icon><View /></el-icon>\n                      Preview Data\n                    </el-button>\n                  </el-form-item>\n\n                  <el-form-item label=\"Columns\" v-if=\"previewHeaders.length > 0\">\n                    <el-card class=\"columns-card\">\n                      <template #header>\n                        <div class=\"columns-header\">\n                          <span>Available Columns</span>\n                          <el-button-group>\n                            <el-button @click=\"selectAllColumns(true)\" size=\"small\">\n                              Select All\n                            </el-button>\n                            <el-button @click=\"selectAllColumns(false)\" size=\"small\">\n                              Deselect All\n                            </el-button>\n                          </el-button-group>\n                        </div>\n                      </template>\n                      <el-checkbox-group v-model=\"form.selectedColumns\">\n                        <el-row :gutter=\"20\">\n                          <el-col :span=\"8\" v-for=\"header in previewHeaders\" :key=\"header\">\n                            <el-checkbox :label=\"header\">\n                              {{ header }}\n                            </el-checkbox>\n                          </el-col>\n                        </el-row>\n                      </el-checkbox-group>\n                    </el-card>\n                  </el-form-item>\n\n                  <el-dialog\n                    v-model=\"showPreviewDialog\"\n                    title=\"File Preview\"\n                    width=\"70%\"\n                    center\n                  >\n                    <el-table\n                      :data=\"previewData\"\n                      style=\"width: 100%\"\n                      height=\"400\"\n                      border\n                    >\n                      <el-table-column\n                        v-for=\"(header, index) in previewHeaders\"\n                        :key=\"index\"\n                        :prop=\"header\"\n                        :label=\"header\"\n                      />\n                    </el-table>\n                  </el-dialog>\n                </template>\n\n                <el-form-item class=\"submit-button\">\n                  <el-button \n                    type=\"primary\" \n                    @click=\"handleSubmit\"\n                    :loading=\"loading\"\n                    size=\"large\"\n                    :disabled=\"form.sourceType === 'clickhouse' && !isConnectionValid\"\n                  >\n                    <el-icon><Upload /></el-icon>\n                    Start Transfer\n                  </el-button>\n                </el-form-item>\n              </el-form>\n            </el-card>\n          </el-col>\n        </el-row>\n\n        <el-dialog\n          v-model=\"showSuccessDialog\"\n          title=\"Transfer Successful\"\n          width=\"30%\"\n          center\n        >\n          <span>Your data transfer has been completed successfully!</span>\n          <template #footer>\n            <span class=\"dialog-footer\">\n              <el-button type=\"primary\" @click=\"showSuccessDialog = false\">\n                Close\n              </el-button>\n            </span>\n          </template>\n        </el-dialog>\n      </el-main>\n    </el-container>\n  </div>\n</template>\n\n<script>\nimport { ref, computed } from 'vue'\nimport axios from 'axios'\nimport { ElMessage } from 'element-plus'\nimport { \n  DataLine, \n  Document, \n  Upload, \n  UploadFilled,\n  Grid,\n  Connection,\n  Port,\n  DataBase,\n  User,\n  Key,\n  Separator,\n  Quote,\n  View,\n  Refresh\n} from '@element-plus/icons-vue'\n\nexport default {\n  name: 'App',\n  components: {\n    DataLine,\n    Document,\n    Upload,\n    UploadFilled,\n    Grid,\n    Connection,\n    Port,\n    DataBase,\n    User,\n    Key,\n    Separator,\n    Quote,\n    View,\n    Refresh\n  },\n  setup() {\n    const form = ref({\n      sourceType: 'clickhouse',\n      connectionType: 'http',\n      host: '',\n      port: '',\n      database: '',\n      user: '',\n      jwtToken: '',\n      query: '',\n      tableName: '',\n      file: null,\n      fileFormat: 'csv',\n      delimiter: ',',\n      quoteChar: '\"',\n      hasHeader: true,\n      selectedTable: '',\n      selectedColumns: []\n    })\n\n    const activeStep = ref(0)\n    const loading = ref(false)\n    const testingConnection = ref(false)\n    const showSuccessDialog = ref(false)\n    const showPreviewDialog = ref(false)\n    const previewLoading = ref(false)\n    const previewData = ref([])\n    const previewHeaders = ref([])\n    const tables = ref([])\n    const columns = ref([])\n    const loadingTables = ref(false)\n\n    const isConnectionValid = computed(() => {\n      return form.value.host && \n             form.value.port && \n             form.value.database && \n             form.value.user\n    })\n\n    const getFileAcceptType = computed(() => {\n      switch (form.value.fileFormat) {\n        case 'csv':\n          return '.csv'\n        case 'tsv':\n          return '.tsv'\n        case 'json':\n          return '.json'\n        default:\n          return '*'\n      }\n    })\n\n    const getFileTypeDescription = computed(() => {\n      switch (form.value.fileFormat) {\n        case 'csv':\n          return 'CSV files up to 10MB'\n        case 'tsv':\n          return 'TSV files up to 10MB'\n        case 'json':\n          return 'JSON files up to 10MB'\n        default:\n          return 'Files up to 10MB'\n      }\n    })\n\n    const handleSourceChange = () => {\n      activeStep.value = 1\n    }\n\n    const handleFileChange = (file) => {\n      form.value.file = file.raw\n      activeStep.value = 1\n    }\n\n    const testConnection = async () => {\n      testingConnection.value = true\n      try {\n        const { data } = await axios.post('/api/data-flow/test-connection', {\n          connectionType: form.value.connectionType,\n          host: form.value.host,\n          port: form.value.port,\n          database: form.value.database,\n          user: form.value.user,\n          jwtToken: form.value.jwtToken\n        })\n        ElMessage.success(data.message || 'Connection successful!')\n      } catch (error) {\n        ElMessage.error(error.response?.data?.message || 'Connection failed')\n      } finally {\n        testingConnection.value = false\n      }\n    }\n\n    const fetchTables = async () => {\n      loadingTables.value = true\n      try {\n        const { data } = await axios.post('/api/data-flow/tables', {\n          connectionType: form.value.connectionType,\n          host: form.value.host,\n          port: form.value.port,\n          database: form.value.database,\n          user: form.value.user,\n          jwtToken: form.value.jwtToken\n        })\n        tables.value = data.tables\n      } catch (error) {\n        ElMessage.error(error.response?.data?.message || 'Failed to fetch tables')\n      } finally {\n        loadingTables.value = false\n      }\n    }\n\n    const handleTableSelect = async (tableName) => {\n      if (!tableName) return\n      \n      try {\n        const { data } = await axios.post('/api/data-flow/columns', {\n          connectionType: form.value.connectionType,\n          host: form.value.host,\n          port: form.value.port,\n          database: form.value.database,\n          user: form.value.user,\n          jwtToken: form.value.jwtToken,\n          table: tableName\n        })\n        columns.value = data.columns\n        form.value.selectedColumns = columns.value.map(col => col.name)\n      } catch (error) {\n        ElMessage.error(error.response?.data?.message || 'Failed to fetch columns')\n      }\n    }\n\n    const selectAllColumns = (select) => {\n      if (form.value.sourceType === 'clickhouse') {\n        form.value.selectedColumns = select ? columns.value.map(col => col.name) : []\n      } else {\n        form.value.selectedColumns = select ? previewHeaders.value : []\n      }\n    }\n\n    const previewFile = async () => {\n      previewLoading.value = true\n      try {\n        const formData = new FormData()\n        formData.append('file', form.value.file)\n        formData.append('format', form.value.fileFormat)\n        formData.append('delimiter', form.value.delimiter)\n        formData.append('quoteChar', form.value.quoteChar)\n        formData.append('hasHeader', form.value.hasHeader)\n\n        const { data } = await axios.post('/api/data-flow/preview-file', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        })\n        \n        previewData.value = data.rows\n        previewHeaders.value = data.headers\n        form.value.selectedColumns = data.headers\n        showPreviewDialog.value = true\n      } catch (error) {\n        ElMessage.error(error.response?.data?.message || 'Failed to preview file')\n      } finally {\n        previewLoading.value = false\n      }\n    }\n\n    const handleSubmit = async () => {\n      loading.value = true\n      try {\n        if (form.value.sourceType === 'clickhouse') {\n          const response = await axios.post('/api/data-flow/clickhouse-to-file', {\n            connectionType: form.value.connectionType,\n            host: form.value.host,\n            port: form.value.port,\n            database: form.value.database,\n            user: form.value.user,\n            jwtToken: form.value.jwtToken,\n            query: form.value.query\n          })\n          ElMessage.success(response.data)\n        } else {\n          const formData = new FormData()\n          formData.append('file', form.value.file)\n          formData.append('tableName', form.value.tableName)\n          formData.append('format', form.value.fileFormat)\n          formData.append('delimiter', form.value.delimiter)\n          formData.append('quoteChar', form.value.quoteChar)\n          formData.append('hasHeader', form.value.hasHeader)\n          \n          const response = await axios.post('/api/data-flow/file-to-clickhouse', formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          })\n          ElMessage.success(response.data)\n        }\n        activeStep.value = 2\n        showSuccessDialog.value = true\n      } catch (error) {\n        ElMessage.error(error.response?.data || 'An error occurred')\n      } finally {\n        loading.value = false\n      }\n    }\n\n    return {\n      form,\n      activeStep,\n      loading,\n      testingConnection,\n      showSuccessDialog,\n      showPreviewDialog,\n      previewLoading,\n      previewData,\n      previewHeaders,\n      isConnectionValid,\n      getFileAcceptType,\n      getFileTypeDescription,\n      handleSourceChange,\n      handleFileChange,\n      testConnection,\n      previewFile,\n      handleSubmit,\n      tables,\n      columns,\n      loadingTables,\n      fetchTables,\n      handleTableSelect,\n      selectAllColumns\n    }\n  }\n}\n</script>\n\n<style>\n.app-container {\n  min-height: 100vh;\n  background-color: #f5f7fa;\n}\n\n.header {\n  background: linear-gradient(135deg, #409EFF 0%, #36D1DC 100%);\n  color: white;\n  padding: 20px 0;\n  text-align: center;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n}\n\n.header-content {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.header h1 {\n  margin: 0;\n  font-size: 2.5em;\n  font-weight: 600;\n}\n\n.subtitle {\n  margin: 10px 0 0;\n  font-size: 1.1em;\n  opacity: 0.9;\n}\n\n.main-content {\n  max-width: 1200px;\n  margin: 40px auto;\n  padding: 0 20px;\n}\n\n.data-flow-card {\n  border-radius: 8px;\n  transition: all 0.3s;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.header-title {\n  font-size: 1.2em;\n  font-weight: 600;\n}\n\n.steps {\n  margin: 30px 0;\n}\n\n.data-form {\n  margin-top: 20px;\n}\n\n.source-type, .connection-type {\n  margin-bottom: 30px;\n}\n\n.query-input {\n  margin-bottom: 20px;\n}\n\n.query-tips {\n  margin-top: 10px;\n}\n\n.file-format {\n  margin-bottom: 20px;\n}\n\n.header-row {\n  margin-bottom: 20px;\n}\n\n.file-upload {\n  margin-bottom: 20px;\n}\n\n.upload-demo {\n  width: 100%;\n}\n\n.table-name {\n  margin-bottom: 30px;\n}\n\n.submit-button {\n  text-align: center;\n  margin-top: 40px;\n}\n\n.el-button {\n  padding: 12px 24px;\n}\n\n.el-icon {\n  margin-right: 5px;\n}\n\n.dialog-footer {\n  display: flex;\n  justify-content: center;\n}\n\n.el-row {\n  margin-bottom: 20px;\n}\n\n.preview-table {\n  margin-top: 20px;\n}\n\n.tables-list {\n  display: flex;\n  gap: 10px;\n  align-items: center;\n}\n\n.refresh-tables {\n  margin-left: 10px;\n}\n\n.columns-card {\n  margin-top: 10px;\n}\n\n.columns-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.column-type {\n  margin-left: 5px;\n}\n\n.el-checkbox {\n  margin-bottom: 10px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}